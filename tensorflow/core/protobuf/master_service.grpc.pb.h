// Generated by the gRPC protobuf plugin.
// If you make any local change, they will be lost.
// source: tensorflow/core/protobuf/master_service.proto
// Original file comments:
// Copyright 2016 Google Inc. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
// ==============================================================================
//
#ifndef GRPC_tensorflow_2fcore_2fprotobuf_2fmaster_5fservice_2eproto__INCLUDED
#define GRPC_tensorflow_2fcore_2fprotobuf_2fmaster_5fservice_2eproto__INCLUDED

#include "tensorflow/core/protobuf/master_service.pb.h"

#include <grpc++/impl/codegen/async_stream.h>
#include <grpc++/impl/codegen/async_unary_call.h>
#include <grpc++/impl/codegen/proto_utils.h>
#include <grpc++/impl/codegen/rpc_method.h>
#include <grpc++/impl/codegen/service_type.h>
#include <grpc++/impl/codegen/status.h>
#include <grpc++/impl/codegen/stub_options.h>
#include <grpc++/impl/codegen/sync_stream.h>

namespace grpc {
class CompletionQueue;
class Channel;
class RpcService;
class ServerCompletionQueue;
class ServerContext;
}  // namespace grpc

namespace tensorflow {
namespace grpc {

// //////////////////////////////////////////////////////////////////////////////
//
// MasterService defines a TensorFlow service with which a client can
// interact to execute a distributed TensorFlow computation.
//
// A master service keeps track of multiple "master sessions". Each
// session encapsulates a computation graph and its associated state,
// and typically corresponds to a single "client session" (e.g. a
// `tensorflow::Session` instance).
//
// A session is responsible for the following:
// * assigning each node to a device (locally or remotely) using a
//   placement algorithm. This may make decisions based on collected
//   statistics from the workers in the system (e.g., memory usage,
//   bandwidth consumption, etc.)
//
// * inserting intermediate nodes and edges to support cross-device
//   and cross-process data flows and resource management.
//
// * issuing commands to workers to execute the subgraphs associated
//   with those workers.
//
// Typically, a client carries out an iterative computation
// (e.g. training) by invoking RPCs against the master in a
// client-side loop. The client first creates a client session that
// connects to a particular master (using gRPC for example). The
// master creates a corresponding master session that is hosted on
// the master and caches state between the client's invocations.
//
// After the session is established, the master returns an opaque
// handle to the client that can be used to associate the client and
// master sessions.
//
// The client may send an initial graph to the master in the
// CreateSession call, and add nodes to the graph using ExtendSession.
//
// The most frequent operation a master is "RunStep", which implements
// the `Session::Run()` API. It supports feeding in arguments,
// executing a dataflow computation, and fetching arguments.
//
// Finally, when the client no longer needs the session, it should
// close the session by invoking CloseSession, which allows the master
// to reclaim resources associated with the session. The master may
// implement a garbage collection scheme that closes sessions that
// have been inactive for some time.
//
// For example, the following pseudo-code illustrates how a client
// interacts with a master:
//
// stub = NewStub("/job:mnist/replica:0/task:0")
// {handle} = stub->CreateSession({graph_def})
// do {
//   stub->RunStep({handle, {feeds}, {fetches}})
//   // The client can evaluate a predicate locally, based on the
//   // result of `fetches`, to determine whether to terminate. For
//   // example, it might fetch the loss and evaluate whether it is less
//   // than some threshold.
// } whlie (!should_stop({fetches}));
// stub->CloseSession({handle})
//
// //////////////////////////////////////////////////////////////////////////////
//
class MasterService GRPC_FINAL {
 public:
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    // Creates a session.
    virtual ::grpc::Status CreateSession(::grpc::ClientContext* context, const ::tensorflow::CreateSessionRequest& request, ::tensorflow::CreateSessionResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::tensorflow::CreateSessionResponse>> AsyncCreateSession(::grpc::ClientContext* context, const ::tensorflow::CreateSessionRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::tensorflow::CreateSessionResponse>>(AsyncCreateSessionRaw(context, request, cq));
    }
    // Extends a session.
    virtual ::grpc::Status ExtendSession(::grpc::ClientContext* context, const ::tensorflow::ExtendSessionRequest& request, ::tensorflow::ExtendSessionResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::tensorflow::ExtendSessionResponse>> AsyncExtendSession(::grpc::ClientContext* context, const ::tensorflow::ExtendSessionRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::tensorflow::ExtendSessionResponse>>(AsyncExtendSessionRaw(context, request, cq));
    }
    // Drives the graph computation.
    virtual ::grpc::Status RunStep(::grpc::ClientContext* context, const ::tensorflow::RunStepRequest& request, ::tensorflow::RunStepResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::tensorflow::RunStepResponse>> AsyncRunStep(::grpc::ClientContext* context, const ::tensorflow::RunStepRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::tensorflow::RunStepResponse>>(AsyncRunStepRaw(context, request, cq));
    }
    // Closes a session.
    virtual ::grpc::Status CloseSession(::grpc::ClientContext* context, const ::tensorflow::CloseSessionRequest& request, ::tensorflow::CloseSessionResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::tensorflow::CloseSessionResponse>> AsyncCloseSession(::grpc::ClientContext* context, const ::tensorflow::CloseSessionRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::tensorflow::CloseSessionResponse>>(AsyncCloseSessionRaw(context, request, cq));
    }
    // List the devices usable by the master.
    virtual ::grpc::Status ListDevices(::grpc::ClientContext* context, const ::tensorflow::ListDevicesRequest& request, ::tensorflow::ListDevicesResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::tensorflow::ListDevicesResponse>> AsyncListDevices(::grpc::ClientContext* context, const ::tensorflow::ListDevicesRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::tensorflow::ListDevicesResponse>>(AsyncListDevicesRaw(context, request, cq));
    }
    // Close all existing sessions.
    virtual ::grpc::Status Reset(::grpc::ClientContext* context, const ::tensorflow::ResetRequest& request, ::tensorflow::ResetResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::tensorflow::ResetResponse>> AsyncReset(::grpc::ClientContext* context, const ::tensorflow::ResetRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::tensorflow::ResetResponse>>(AsyncResetRaw(context, request, cq));
    }
  private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::tensorflow::CreateSessionResponse>* AsyncCreateSessionRaw(::grpc::ClientContext* context, const ::tensorflow::CreateSessionRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::tensorflow::ExtendSessionResponse>* AsyncExtendSessionRaw(::grpc::ClientContext* context, const ::tensorflow::ExtendSessionRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::tensorflow::RunStepResponse>* AsyncRunStepRaw(::grpc::ClientContext* context, const ::tensorflow::RunStepRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::tensorflow::CloseSessionResponse>* AsyncCloseSessionRaw(::grpc::ClientContext* context, const ::tensorflow::CloseSessionRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::tensorflow::ListDevicesResponse>* AsyncListDevicesRaw(::grpc::ClientContext* context, const ::tensorflow::ListDevicesRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::tensorflow::ResetResponse>* AsyncResetRaw(::grpc::ClientContext* context, const ::tensorflow::ResetRequest& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub GRPC_FINAL : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel);
    ::grpc::Status CreateSession(::grpc::ClientContext* context, const ::tensorflow::CreateSessionRequest& request, ::tensorflow::CreateSessionResponse* response) GRPC_OVERRIDE;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::tensorflow::CreateSessionResponse>> AsyncCreateSession(::grpc::ClientContext* context, const ::tensorflow::CreateSessionRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::tensorflow::CreateSessionResponse>>(AsyncCreateSessionRaw(context, request, cq));
    }
    ::grpc::Status ExtendSession(::grpc::ClientContext* context, const ::tensorflow::ExtendSessionRequest& request, ::tensorflow::ExtendSessionResponse* response) GRPC_OVERRIDE;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::tensorflow::ExtendSessionResponse>> AsyncExtendSession(::grpc::ClientContext* context, const ::tensorflow::ExtendSessionRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::tensorflow::ExtendSessionResponse>>(AsyncExtendSessionRaw(context, request, cq));
    }
    ::grpc::Status RunStep(::grpc::ClientContext* context, const ::tensorflow::RunStepRequest& request, ::tensorflow::RunStepResponse* response) GRPC_OVERRIDE;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::tensorflow::RunStepResponse>> AsyncRunStep(::grpc::ClientContext* context, const ::tensorflow::RunStepRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::tensorflow::RunStepResponse>>(AsyncRunStepRaw(context, request, cq));
    }
    ::grpc::Status CloseSession(::grpc::ClientContext* context, const ::tensorflow::CloseSessionRequest& request, ::tensorflow::CloseSessionResponse* response) GRPC_OVERRIDE;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::tensorflow::CloseSessionResponse>> AsyncCloseSession(::grpc::ClientContext* context, const ::tensorflow::CloseSessionRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::tensorflow::CloseSessionResponse>>(AsyncCloseSessionRaw(context, request, cq));
    }
    ::grpc::Status ListDevices(::grpc::ClientContext* context, const ::tensorflow::ListDevicesRequest& request, ::tensorflow::ListDevicesResponse* response) GRPC_OVERRIDE;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::tensorflow::ListDevicesResponse>> AsyncListDevices(::grpc::ClientContext* context, const ::tensorflow::ListDevicesRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::tensorflow::ListDevicesResponse>>(AsyncListDevicesRaw(context, request, cq));
    }
    ::grpc::Status Reset(::grpc::ClientContext* context, const ::tensorflow::ResetRequest& request, ::tensorflow::ResetResponse* response) GRPC_OVERRIDE;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::tensorflow::ResetResponse>> AsyncReset(::grpc::ClientContext* context, const ::tensorflow::ResetRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::tensorflow::ResetResponse>>(AsyncResetRaw(context, request, cq));
    }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    ::grpc::ClientAsyncResponseReader< ::tensorflow::CreateSessionResponse>* AsyncCreateSessionRaw(::grpc::ClientContext* context, const ::tensorflow::CreateSessionRequest& request, ::grpc::CompletionQueue* cq) GRPC_OVERRIDE;
    ::grpc::ClientAsyncResponseReader< ::tensorflow::ExtendSessionResponse>* AsyncExtendSessionRaw(::grpc::ClientContext* context, const ::tensorflow::ExtendSessionRequest& request, ::grpc::CompletionQueue* cq) GRPC_OVERRIDE;
    ::grpc::ClientAsyncResponseReader< ::tensorflow::RunStepResponse>* AsyncRunStepRaw(::grpc::ClientContext* context, const ::tensorflow::RunStepRequest& request, ::grpc::CompletionQueue* cq) GRPC_OVERRIDE;
    ::grpc::ClientAsyncResponseReader< ::tensorflow::CloseSessionResponse>* AsyncCloseSessionRaw(::grpc::ClientContext* context, const ::tensorflow::CloseSessionRequest& request, ::grpc::CompletionQueue* cq) GRPC_OVERRIDE;
    ::grpc::ClientAsyncResponseReader< ::tensorflow::ListDevicesResponse>* AsyncListDevicesRaw(::grpc::ClientContext* context, const ::tensorflow::ListDevicesRequest& request, ::grpc::CompletionQueue* cq) GRPC_OVERRIDE;
    ::grpc::ClientAsyncResponseReader< ::tensorflow::ResetResponse>* AsyncResetRaw(::grpc::ClientContext* context, const ::tensorflow::ResetRequest& request, ::grpc::CompletionQueue* cq) GRPC_OVERRIDE;
    const ::grpc::RpcMethod rpcmethod_CreateSession_;
    const ::grpc::RpcMethod rpcmethod_ExtendSession_;
    const ::grpc::RpcMethod rpcmethod_RunStep_;
    const ::grpc::RpcMethod rpcmethod_CloseSession_;
    const ::grpc::RpcMethod rpcmethod_ListDevices_;
    const ::grpc::RpcMethod rpcmethod_Reset_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    // Creates a session.
    virtual ::grpc::Status CreateSession(::grpc::ServerContext* context, const ::tensorflow::CreateSessionRequest* request, ::tensorflow::CreateSessionResponse* response);
    // Extends a session.
    virtual ::grpc::Status ExtendSession(::grpc::ServerContext* context, const ::tensorflow::ExtendSessionRequest* request, ::tensorflow::ExtendSessionResponse* response);
    // Drives the graph computation.
    virtual ::grpc::Status RunStep(::grpc::ServerContext* context, const ::tensorflow::RunStepRequest* request, ::tensorflow::RunStepResponse* response);
    // Closes a session.
    virtual ::grpc::Status CloseSession(::grpc::ServerContext* context, const ::tensorflow::CloseSessionRequest* request, ::tensorflow::CloseSessionResponse* response);
    // List the devices usable by the master.
    virtual ::grpc::Status ListDevices(::grpc::ServerContext* context, const ::tensorflow::ListDevicesRequest* request, ::tensorflow::ListDevicesResponse* response);
    // Close all existing sessions.
    virtual ::grpc::Status Reset(::grpc::ServerContext* context, const ::tensorflow::ResetRequest* request, ::tensorflow::ResetResponse* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_CreateSession : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_CreateSession() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_CreateSession() GRPC_OVERRIDE {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateSession(::grpc::ServerContext* context, const ::tensorflow::CreateSessionRequest* request, ::tensorflow::CreateSessionResponse* response) GRPC_FINAL GRPC_OVERRIDE {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCreateSession(::grpc::ServerContext* context, ::tensorflow::CreateSessionRequest* request, ::grpc::ServerAsyncResponseWriter< ::tensorflow::CreateSessionResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_ExtendSession : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_ExtendSession() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_ExtendSession() GRPC_OVERRIDE {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ExtendSession(::grpc::ServerContext* context, const ::tensorflow::ExtendSessionRequest* request, ::tensorflow::ExtendSessionResponse* response) GRPC_FINAL GRPC_OVERRIDE {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestExtendSession(::grpc::ServerContext* context, ::tensorflow::ExtendSessionRequest* request, ::grpc::ServerAsyncResponseWriter< ::tensorflow::ExtendSessionResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_RunStep : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_RunStep() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_RunStep() GRPC_OVERRIDE {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RunStep(::grpc::ServerContext* context, const ::tensorflow::RunStepRequest* request, ::tensorflow::RunStepResponse* response) GRPC_FINAL GRPC_OVERRIDE {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestRunStep(::grpc::ServerContext* context, ::tensorflow::RunStepRequest* request, ::grpc::ServerAsyncResponseWriter< ::tensorflow::RunStepResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_CloseSession : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_CloseSession() {
      ::grpc::Service::MarkMethodAsync(3);
    }
    ~WithAsyncMethod_CloseSession() GRPC_OVERRIDE {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CloseSession(::grpc::ServerContext* context, const ::tensorflow::CloseSessionRequest* request, ::tensorflow::CloseSessionResponse* response) GRPC_FINAL GRPC_OVERRIDE {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCloseSession(::grpc::ServerContext* context, ::tensorflow::CloseSessionRequest* request, ::grpc::ServerAsyncResponseWriter< ::tensorflow::CloseSessionResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_ListDevices : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_ListDevices() {
      ::grpc::Service::MarkMethodAsync(4);
    }
    ~WithAsyncMethod_ListDevices() GRPC_OVERRIDE {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListDevices(::grpc::ServerContext* context, const ::tensorflow::ListDevicesRequest* request, ::tensorflow::ListDevicesResponse* response) GRPC_FINAL GRPC_OVERRIDE {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestListDevices(::grpc::ServerContext* context, ::tensorflow::ListDevicesRequest* request, ::grpc::ServerAsyncResponseWriter< ::tensorflow::ListDevicesResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_Reset : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_Reset() {
      ::grpc::Service::MarkMethodAsync(5);
    }
    ~WithAsyncMethod_Reset() GRPC_OVERRIDE {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Reset(::grpc::ServerContext* context, const ::tensorflow::ResetRequest* request, ::tensorflow::ResetResponse* response) GRPC_FINAL GRPC_OVERRIDE {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestReset(::grpc::ServerContext* context, ::tensorflow::ResetRequest* request, ::grpc::ServerAsyncResponseWriter< ::tensorflow::ResetResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(5, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_CreateSession<WithAsyncMethod_ExtendSession<WithAsyncMethod_RunStep<WithAsyncMethod_CloseSession<WithAsyncMethod_ListDevices<WithAsyncMethod_Reset<Service > > > > > > AsyncService;
  template <class BaseClass>
  class WithGenericMethod_CreateSession : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_CreateSession() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_CreateSession() GRPC_OVERRIDE {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateSession(::grpc::ServerContext* context, const ::tensorflow::CreateSessionRequest* request, ::tensorflow::CreateSessionResponse* response) GRPC_FINAL GRPC_OVERRIDE {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_ExtendSession : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_ExtendSession() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_ExtendSession() GRPC_OVERRIDE {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ExtendSession(::grpc::ServerContext* context, const ::tensorflow::ExtendSessionRequest* request, ::tensorflow::ExtendSessionResponse* response) GRPC_FINAL GRPC_OVERRIDE {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_RunStep : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_RunStep() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_RunStep() GRPC_OVERRIDE {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RunStep(::grpc::ServerContext* context, const ::tensorflow::RunStepRequest* request, ::tensorflow::RunStepResponse* response) GRPC_FINAL GRPC_OVERRIDE {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_CloseSession : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_CloseSession() {
      ::grpc::Service::MarkMethodGeneric(3);
    }
    ~WithGenericMethod_CloseSession() GRPC_OVERRIDE {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CloseSession(::grpc::ServerContext* context, const ::tensorflow::CloseSessionRequest* request, ::tensorflow::CloseSessionResponse* response) GRPC_FINAL GRPC_OVERRIDE {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_ListDevices : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_ListDevices() {
      ::grpc::Service::MarkMethodGeneric(4);
    }
    ~WithGenericMethod_ListDevices() GRPC_OVERRIDE {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListDevices(::grpc::ServerContext* context, const ::tensorflow::ListDevicesRequest* request, ::tensorflow::ListDevicesResponse* response) GRPC_FINAL GRPC_OVERRIDE {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_Reset : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_Reset() {
      ::grpc::Service::MarkMethodGeneric(5);
    }
    ~WithGenericMethod_Reset() GRPC_OVERRIDE {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Reset(::grpc::ServerContext* context, const ::tensorflow::ResetRequest* request, ::tensorflow::ResetResponse* response) GRPC_FINAL GRPC_OVERRIDE {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
};

}  // namespace grpc
}  // namespace tensorflow


#endif  // GRPC_tensorflow_2fcore_2fprotobuf_2fmaster_5fservice_2eproto__INCLUDED
